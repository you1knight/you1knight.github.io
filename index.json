[
{
	"uri": "https://you1knight.github.io/programming/notes/",
	"title": "Note",
	"tags": [],
	"description": "",
	"content": " Chapter 1 Note Discover what this Hugo theme is all about and the core-concepts behind it.\n"
},
{
	"uri": "https://you1knight.github.io/programming/notes/tcpip%E5%8D%8F%E8%AE%AE/tcpip/",
	"title": "TCP/IP协议",
	"tags": ["TCP/IP"],
	"description": "",
	"content": " IPv4报文格式： 1）版本：指IP协议的版本，目前广泛使用的版本号为4\n2）首部长度：占4位，数值的单位为32位，即最大长度binary(1111)x32位=60字节\n3）总长度：占16位，指首部和数据之和的长度，数值的单位为字节，最大长度为2^16-1=65535字节，以太网帧的最大传送单元MTU为1500字节\n4）标识：占16位，它是一个计数器，每产生一个数据包就加1，并赋值给标识字段。但它并不是序号，因为IP是无连接服务。当一个数据报长度超过网络的MTU时，必须分片，此时每个数据报片都复制一次标识号以便能正确重装成原来的数据报。\n5）标志：占3位，标志字段的最低位为MF，MF=1表示后面还有分片；MF=0表示最后一个分片。标志字段中间的一位时DF，只有当DF=0才表示允许分片。\n6）片偏移：占13位，它指出较长的分组在分片后，某片在原分组中的相对位置。片偏移以8个字节为偏移单位，也即每个分片的长度一定时8字节的整数倍。\n7）首部校验和：占16位，IP数据报的首部校验和只校验分组的首部，而不校验数据部分。\n8）生存时间TTL：占8位，即数据报在网络中可通过的路由器数的最大值，标识分组在网络中的寿命，以确保分组不会永远在网络中循环。路由器在转发分组之前，先把TTL减1，若TTL被减为0，则该分组必须丢弃。\n9）协议：占8位，指出此分组携带的数据是使用何种协议，即分组的数据部分应该交给哪个传输层协议，如TCP、UDP等。其中2表示IGMP，6表示TCP，17表示UPDP。\n10）源地址字段：占32位，标识发送方的IP地址\n11）目的地址字段：占32位，标识接受方的IP地址\n"
},
{
	"uri": "https://you1knight.github.io/programming/notes/http%E5%8D%8F%E8%AE%AE/http/",
	"title": "HTTP协议",
	"tags": ["HTTP", "HTTPS", "TLS/SSL"],
	"description": "",
	"content": "Discover what this Hugo theme is all about and the core-concepts behind it.\n1.http请求和响应的头部 2.http与https的区别 3.TLS/SSL 4.get和post 5.Cookie和Session\n6.域名\n"
},
{
	"uri": "https://you1knight.github.io/programming/notes/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/",
	"title": "MySQL数据库",
	"tags": ["MySQL"],
	"description": "",
	"content": " 事务 1. 事务四大特征\n 原子性\u0026emsp;事务是数据库的逻辑工作单位，事务中包含的各操作要么都做，要么都不做 。\n 一致性\u0026emsp;事务的执行不能破坏数据库数据的完整性和一致性。一个事务在执行之前和执行之后，数据库都必须处于一致性状态。 比如：如果从A账户转账到B账户，不可能因为A账户扣了钱，而B账户没有加钱 。\n 隔离性\u0026emsp;在并发环境中，并发的事务是互相隔离的，一个事务的执行不能被其它事务干扰 。\n 持久性\u0026emsp;事务一旦提交后，数据库中的数据必须被永久的保存下来。即使服务器系统崩溃或服务器宕机等故障。只要数据库重新启动，那么一定能够将其恢复到事务成功结束后的状态。\n  2. 四种事务隔离级别\n Read uncommitted(读未提交)：就是一个事务可以读取另一个未提交事务的数据。(脏读)\n Read committed(读已提交)：就是一个事务要等另一个事务提交后才能读取数据。(不可重复读)\n Repeatable read(重复读)：就是在开始读取数据（事务开启）时，不再允许修改操作。(幻读)\n Serializable(串行化)：当操作一行数据时，读写分别都会加锁。当出现读写锁互斥时，会排队串行执行。\n  值得一提的是：大多数数据库默认的事务隔离级别是Read committed，比如Sql Server , Oracle。Mysql的默认隔离级别是Repeatable read。\n锁机制 1. 悲观锁与乐观锁\n 悲观锁：当我们要对一个数据库中的一条数据进行修改的时候，为了避免同时被其他人修改，最好的办法就是直接对该数据进行加锁以防止并发。这种借助数据库锁机制，在修改数据之前先锁定，再修改的方式被称之为悲观并发控制 乐观锁：乐观锁是相对悲观锁而言的，乐观锁假设数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则返回给用户错误的信息，让用户决定如何去做。  2. 对数据的操作类型分共享锁和排他锁\n 共享锁(读锁)：加了读锁，只允许别的事务继续加读锁而不能加写锁，也就是只读。 排他锁(写锁)：加了写锁，别的事务不允许加任何锁。 意向锁：意向锁是表级锁，但是却表示事务正在读或写某一行记录，而不是整个表。意向锁分为意向读锁(IS)和意向写锁(IX)。意向锁是为了让表锁和行锁共存 (表锁与行锁冲突案例：事务A锁住表中的一行，事务B锁住整个表，事务A既然锁住了某一行，其他事务就不可能修改这一行。这与”事务B锁住整个表就能修改表中的任意一行“形成了冲突)。  3. 对数据的操作粒度分表锁和行锁\n\u0026emsp;MySQL的锁机制比较简单，其最显著的特点是不同的存储引擎支持不同的锁机制。比如，MyISAM和MEMORY存储引擎采用的是表级锁（table-level locking）；BDB存储引擎采用的是页面锁（page-level locking），但也支持表级锁；InnoDB存储引擎既支持行级锁（row-level locking），也支持表级锁，但默认情况下是采用行级锁。\n 表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。 行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。 页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。  4. 死锁\n 死锁:死锁是指两个或两个以上的进程在执行过程中,因争夺资源而造成的一种互相等待的现象,若无外力作用,它们都将无法推进下去.此时称系统处于死锁状态或系统产生了死锁,这些永远在互相等的进程称为死锁进程。 更多关于死锁:\nMySQL加锁处理分析\nMySQL产生死锁的根本原因及解决办法\nMySQL死锁问题分析   5. 相关命令:\n 查询是否锁表\nshow OPEN TABLES where In_use \u0026gt; 0; 查询进程\nshow processlist 查看正在锁的事务\nSELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS; 查看等待锁的事务\nSELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS;  索引  聚集索引(Clustered Index):数据库表行中数据的物理顺序与键值的逻辑（索引）顺序相同。叶子节点称为数据页，每个数据页通过一个双向链表来进行链接，而且数据页按照主键的顺序进行排列。 辅助索引(Secondary Index):也叫非聚集索引，叶子节点除了包含键值以外，每个叶子节点的索引行还包含了一个书签（bookmark），该书签用来告诉InnoDB哪里可以找到与索引相对应的行数据。 联合索引:表上多个列进行建立索引，索引的键值大于等于2个。联合索引的键值在B+树中也是有序的，通过叶子节点可以在逻辑的顺序哈桑读出所有数据。 覆盖索引（Covering index):从辅助索引中就可以直接得到查询的记录，而不需要再次查询聚集索引中的记录。使用覆盖索引的好处就是，辅助索引不包括整行记录的所有信息，所以覆盖索引的大小要小于聚集索引,因此可以减少IO次数。  MySQL数据库引擎\n \u0026emsp;InnoDB和MyISAM是许多人在使用MySQL时最常用的两个表类型，这两个表类型各有优劣，视具体应用而定。基本的差别为：MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持。MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。\n\u0026emsp;以下是一些细节和具体实现的差别：\n InnoDB不支持FULLTEXT类型的索引。 InnoDB 中不保存表的具体行数 对于AUTO_INCREMENT类型的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中，可以和其他字段一起建立联合索引。 DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。 InnoDB类型支持事务处理等高级处理 InnoDB索引与数据在同一个文件，MyISAM索引和数据是分开的  "
},
{
	"uri": "https://you1knight.github.io/programming/notes/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/",
	"title": "Redis数据库",
	"tags": ["Redis"],
	"description": "",
	"content": "** 持久化\n1.RDB:通过配置redis在n秒内如果超过m个key被修改这执行一次RDB操作。snapshot触发的时机，是有“间隔时间”和“变更次数”共同决定，同时符合2个条件才会触发snapshot,否则“变更次数”会被继续累加到下一个“间隔时间”上。 优点：使用单独子进程来进行持久化，主进程不会进行任何IO操作，保证了redis的高性能 缺点：RDB是间隔一段时间进行持久化，如果持久化之间redis发生故障，会发生数据丢失。所以这种方式更适合数据要求不严谨的时候\n2.AOF:将“操作 + 数据”以格式化指令的方式追加到操作日志文件的尾部，在append操作返回后(已经写入到文件或者即将写入)，才进行实际的数据变更，“日志文件”保存了历史所有的操作过程 优点：可以保持更高的数据完整性，如果设置追加file的时间是1s，如果redis发生故障，最多会丢失1s的数据；且如果日志写入不完整支持redis-check-aof来进行日志修复；AOF文件没被rewrite之前（文件过大时会对命令进行合并重写），可以删除其中的某些命令（比如误操作的flushall）。 缺点：AOF文件比RDB文件大，且恢复速度慢。\n** 为什么redis是单线程的都那么快？\n1.数据存于内存 2.用了多路复用I/O 3.单线程\n** redis也可以进行发布订阅消息吗？\n"
},
{
	"uri": "https://you1knight.github.io/programming/notes/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/mq/",
	"title": "消息队列",
	"tags": ["concurrency", "MQ"],
	"description": "",
	"content": " Kafka Discover what this Hugo theme is all about and the core-concepts behind it.\nRabbitMQ Discover what this Hugo theme is all about and the core-concepts behind it.\n"
},
{
	"uri": "https://you1knight.github.io/programming/",
	"title": "Programming",
	"tags": [],
	"description": "",
	"content": " Programming START YOUR MAGICAL JOURNEY\n"
},
{
	"uri": "https://you1knight.github.io/math/",
	"title": "Math",
	"tags": [],
	"description": "",
	"content": " Chapter 2 Math Discover what this Hugo theme is all about and the core-concepts behind it.\n"
},
{
	"uri": "https://you1knight.github.io/movie/",
	"title": "Movie",
	"tags": [],
	"description": "",
	"content": " Chapter 3 Movie Discover what this Hugo theme is all about and the core-concepts behind it.\n"
},
{
	"uri": "https://you1knight.github.io/reading/",
	"title": "Reading",
	"tags": [],
	"description": "",
	"content": " Chapter 4 Reading Discover what this Hugo theme is all about and the core-concepts behind it.\n"
},
{
	"uri": "https://you1knight.github.io/english/",
	"title": "English",
	"tags": [],
	"description": "",
	"content": " Chapter 5 English Discover what this Hugo theme is all about and the core-concepts behind it.\n"
},
{
	"uri": "https://you1knight.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://you1knight.github.io/tags/mysql/",
	"title": "MySQL",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://you1knight.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://you1knight.github.io/",
	"title": "you1knight",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://you1knight.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8/",
	"title": "数据库应用",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://you1knight.github.io/tags/http/",
	"title": "HTTP",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://you1knight.github.io/tags/https/",
	"title": "HTTPS",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://you1knight.github.io/tags/tls/ssl/",
	"title": "TLS/SSL",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://you1knight.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",
	"title": "计算机网络",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://you1knight.github.io/tags/concurrency/",
	"title": "concurrency",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://you1knight.github.io/tags/mq/",
	"title": "MQ",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://you1knight.github.io/tags/redis/",
	"title": "Redis",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://you1knight.github.io/tags/tcp/ip/",
	"title": "TCP/IP",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://you1knight.github.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/",
	"title": "消息队列",
	"tags": [],
	"description": "",
	"content": ""
}]